name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd RewardModeling/python
        pip install -e ".[dev,all]"

    - name: Lint with flake8
      run: |
        cd RewardModeling/python
        flake8 reward_modeling tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 reward_modeling tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        cd RewardModeling/python
        black --check reward_modeling tests

    - name: Import sort check with isort
      run: |
        cd RewardModeling/python
        isort --check-only reward_modeling tests

    - name: Type check with mypy
      run: |
        cd RewardModeling/python
        mypy reward_modeling

    - name: Test with pytest
      run: |
        cd RewardModeling/python
        pytest tests/ --cov=reward_modeling --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./RewardModeling/python/coverage.xml
        flags: unittests
        name: codecov-umbrella

  rust-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          RewardModeling/rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Format check
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --manifest-path RewardModeling/rust/Cargo.toml -- --check

    - name: Clippy check
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --manifest-path RewardModeling/rust/Cargo.toml -- -D warnings

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --manifest-path RewardModeling/rust/Cargo.toml

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: RewardModeling/tauri/ui/package-lock.json

    - name: Install dependencies
      run: |
        cd RewardModeling/tauri/ui
        npm ci

    - name: Lint TypeScript
      run: |
        cd RewardModeling/tauri/ui
        npm run lint

    - name: Type check
      run: |
        cd RewardModeling/tauri/ui
        npm run type-check

    - name: Run tests
      run: |
        cd RewardModeling/tauri/ui
        npm test

    - name: Build
      run: |
        cd RewardModeling/tauri/ui
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, rust-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./RewardModeling/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    needs: [test, rust-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release 