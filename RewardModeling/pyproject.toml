[tool.poetry]
name = "reward-modeling-platform"
version = "1.0.0"
description = "A comprehensive platform for reward modeling and LLM alignment"
authors = ["Reward Modeling Team <team@rewardmodeling.ai>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/your-org/reward-modeling-platform"
repository = "https://github.com/your-org/reward-modeling-platform"
documentation = "https://reward-modeling-platform.readthedocs.io"
keywords = ["machine-learning", "nlp", "llm", "alignment", "reward-modeling", "rlhf", "dpo"]

[tool.poetry.dependencies]
python = "^3.8"

# Core ML dependencies
torch = "^2.0.0"
transformers = "^4.35.0"
datasets = "^2.14.0"
numpy = "^1.24.0"
scipy = "^1.10.0"

# FastAPI and web dependencies
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}
alembic = "^1.12.0"
asyncpg = "^0.29.0"
redis = "^5.0.0"
celery = "^5.3.0"

# Authentication and security
pyjwt = "^2.8.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"

# Data processing and utilities
pandas = "^2.1.0"
pyarrow = "^14.0.0"
polars = "^0.19.0"
jsonlines = "^4.0.0"
pyyaml = "^6.0"
click = "^8.1.0"
rich = "^13.7.0"
typer = "^0.9.0"

# Monitoring and logging
wandb = "^0.16.0"
tensorboard = "^2.15.0"
prometheus-client = "^0.19.0"
structlog = "^23.2.0"

# Agent frameworks
dspy-ai = "^2.4.0"
langchain = "^0.0.350"
langchain-community = "^0.0.350"
openai = "^1.3.0"
anthropic = "^0.7.0"

# Progress and async utilities
tqdm = "^4.66.0"
aiofiles = "^23.2.0"
httpx = "^0.25.0"

# Rust integration
maturin = "^1.4.0"

# Development and testing dependencies
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
coverage = "^7.3.0"

# Code quality
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"
pre-commit = "^3.6.0"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

# Optional GPU dependencies (install manually based on CUDA version)
# torch-audio = {version = "^2.0.0", optional = true}
# torchvision = {version = "^0.15.0", optional = true}

[tool.poetry.group.dev.dependencies]
ipython = "^8.17.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"
jupyterlab = "^4.0.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
sphinx-autodoc-typehints = "^1.25.0"

[tool.poetry.extras]
gpu = ["torch-audio", "torchvision"]
all = ["torch-audio", "torchvision"]

[tool.poetry.scripts]
rmep = "reward_modeling.cli:main"
rmep-api = "reward_modeling.api.main:main"
rmep-train = "reward_modeling.training.cli:main"

[build-system]
requires = ["poetry-core>=1.0.0", "maturin>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "datasets.*",
    "wandb.*",
    "dspy.*",
    "langchain.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["python/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=reward_modeling",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["reward_modeling"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]